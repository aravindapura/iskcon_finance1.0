generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @db.Uuid
  role      String
  login     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("users")
}

model Operation {
  id          String   @id @db.Uuid
  type        String
  amount      Decimal  @db.Decimal
  currency    String
  category    String
  wallet      String
  comment     String?
  source      String?
  occurred_at DateTime @db.Timestamptz(6)

  @@index([occurred_at(sort: Desc)])
  @@map("operations")
}

model Debt {
  id            String   @id @db.Uuid
  type          String
  status        String
  amount        Decimal  @db.Decimal
  currency      String
  wallet        String
  from_contact  String?
  to_contact    String?
  comment       String?
  registered_at DateTime @db.Timestamptz(6)

  @@index([registered_at(sort: Desc)])
  @@map("debts")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Goal {
  id             String  @id @db.Uuid
  title          String
  target_amount  Decimal @db.Decimal
  current_amount Decimal @default(0) @db.Decimal
  status         String
  currency       String

  @@map("goals")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Wallet {
  wallet       String @id
  display_name String
  currency     String @default("USD")

  @@map("wallets")
}

model Category {
  id   Int    @id @default(autoincrement())
  type String
  name String

  @@unique([type, name])
  @@map("categories")
}

model Settings {
  id            Int      @id @default(autoincrement())
  base_currency String
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("settings")
}

model CurrencyRate {
  currency   String   @id
  rate       Decimal  @db.Decimal
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("currency_rates")
}

model exchange_rates {
  id              Int      @id @default(autoincrement())
  base_currency   String
  target_currency String
  rate            Float
  date            DateTime @default(now()) @db.Timestamptz(6)

  @@unique([base_currency, target_currency], map: "baseCurrency_targetCurrency")
}
